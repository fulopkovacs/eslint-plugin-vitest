// eslint-disable-next-line eslint-comments/disable-enable-pair
/* eslint-disable @typescript-eslint/no-explicit-any */
import fs from 'node:fs'
import url from 'node:url'
import path from 'node:path'

async function generate() {
  const __dirname = url.fileURLToPath(new URL('.', import.meta.url))
  const rules = fs.readdirSync(path.resolve(__dirname, '../src/rules'))

  const allRules: any[] = []
  const recommendedRules: any[] = []

  await Promise.all(
    rules.map(async (rule) => {
      const ruleName = rule.replace(/\.ts$/, '')
      const content = await import(
        path.resolve(__dirname, `../src/rules/${ruleName}.ts`)
      )

      if (content.default.meta.docs.recommended === 'strict') {
        recommendedRules.push({
          name: ruleName,
          rule: content.default
        })
      } else {
        allRules.push({
          name: ruleName,
          rule: content.default
        })
      }
    })
  )

  const allRulesNames = allRules.reduce((acc, { name }) => {
    return {
      ...acc,
      [name]: 'warn'
    }
  }, {})

  const allRecommendedRulesNames = recommendedRules.reduce((acc, { name }) => {
    return {
      ...acc,
      [name]: 'error'
    }
  }, {})

  const allImports = allRules.reduce((acc, { name }) => {
    const namesWithoutDash = name.replace(/-/g, '')
    return {
      ...acc,
      name,
      import: `import ${namesWithoutDash} from './rules/${name}.ts'`
    }
  }, {})

  const createConfig = (rules: Record<string, string>) => ({
    plugins: ['vitest'],
    rules: Object.keys(rules).reduce((acc, ruleName) => {
      return {
        ...acc,
        [`vitest/${ruleName}`]: rules[ruleName]
      }
    }, {})
  })

  const returnObj = {
    rules: allRulesNames,
    configs: {
      all: createConfig(allRulesNames),
      recommended: createConfig(allRecommendedRulesNames)
    },
    environments: {
      env: {
        globals: {
          suite: true,
          test: true,
          describe: true,
          it: true,
          expect: true,
          assert: true,
          vitest: true,
          vi: true,
          beforeAll: true,
          afterAll: true,
          beforeEach: true,
          afterEach: true
        }
      }
    }
  }

  const date = new Date()

  // write all Object conflig to index file
  fs.writeFileSync(
    path.resolve(__dirname, '../src/index.ts'),
    `// This file was last auto generated by scripts/generate.ts at: ${
      date.toLocaleDateString() +
      ' ' +
      date.toLocaleTimeString() +
      ' ' +
      Intl.DateTimeFormat().resolvedOptions().timeZone
    }
		export default ${JSON.stringify(returnObj)}`,
    'utf8'
  )
}

generate().catch((e) => {
  console.error(e)
  process.exit(1)
})
