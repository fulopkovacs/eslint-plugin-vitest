// eslint-disable-next-line eslint-comments/disable-enable-pair
/* eslint-disable @typescript-eslint/no-explicit-any */
import fs from 'node:fs'
import url from 'node:url'
import path from 'node:path'

async function generate() {
  const __dirname = url.fileURLToPath(new URL('.', import.meta.url))
  const rules = fs.readdirSync(path.resolve(__dirname, '../src/rules'))

  const allRules: any[] = []
  const recommendedRules: any[] = []

  await Promise.all(
    rules.map(async (rule) => {
      const ruleName = rule.replace(/\.ts$/, '')
      const content = await import(
        path.resolve(__dirname, `../src/rules/${ruleName}`)
      )

      if (content.default.meta.docs.recommended === 'strict') {
        recommendedRules.push({
          name: ruleName,
          rule: content.default
        })
      } else {
        allRules.push({
          name: ruleName,
          rule: content.default
        })
      }
    })
  )

  function capitalizeLetterAfterDash(inputString) {
    return inputString.replace(/-([a-zA-Z])/g, function (match, letter) {
      return letter.toUpperCase()
    })
  }

  const allImports = allRules.map((item) => {
    return {
      name: item.name,
      isRecommended: item.rule.meta.docs.recommended === 'strict',
      import: `import ${capitalizeLetterAfterDash(item.name)} from './rules/${
        item.name
      }'`
    }
  })

  const createConfig = (rules) => {
    const config = {
      plugins: ['vitest'],
      rules: {}
    }

    rules.forEach((rule) => {
      config.rules[`vitest/${rule.name}`] = rule.ruleImportName
    })
}

  console.log(createConfig(allImports.map((item) => ({
	name: item.name,
	ruleImportName: capitalizeLetterAfterDash(item.name)
  }))))

  const returnObj = {
    rules: allImports.map((item) => item.name),
    configs: {
      all: createConfig(
        allImports.map((item) => ({
          name: item.name,
          ruleImportName: capitalizeLetterAfterDash(item.name)
        }))
      ),
      recommended: createConfig(
        allImports
          .filter((item) => item.isRecommended)
          .map((item) => ({
            name: item.name,
            ruleImportName: capitalizeLetterAfterDash(item.name)
          }))
      )
    },
    environments: {
      env: {
        globals: {
          suite: true,
          test: true,
          describe: true,
          it: true,
          expect: true,
          assert: true,
          vitest: true,
          vi: true,
          beforeAll: true,
          afterAll: true,
          beforeEach: true,
          afterEach: true
        }
      }
    }
  }

  const date = new Date()

  fs.writeFileSync(
    path.resolve(__dirname, '../src/index.ts'),
    `// This file was last auto generated by scripts/generate.ts at: ${
      date.toLocaleDateString() +
      ' ' +
      date.toLocaleTimeString() +
      ' ' +
      Intl.DateTimeFormat().resolvedOptions().timeZone
    }
	${allImports.map((item) => item.import).join('\n')} \n\n
		export default ${JSON.stringify(returnObj)}`,
    'utf8'
  )
}

generate().catch((e) => {
  console.error(e)
  process.exit(1)
})
